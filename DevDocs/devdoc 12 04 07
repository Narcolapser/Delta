So, I got object parenting working minimally. there is an awkward delay right now. But I'll figure that out later. The important part is I've got it all initially working. 

So I'm going to press on now to the creation of scene objects. Scene objects are the containers that are responsible for holding all the objects of a scene, be it a level or a menu screen. I'm thinking also that they will be the ones responsible for object interactions with the user. In other words, scenes will recieve input from Delta, and the scene will map the input to the objects. so like right now, a and d move the sphere left and right. 

While I was experimenting around with taking the actual modification of an object internal to the object, I ran across a glitch that may help me fix the delay problem. I changed "move" to be internal to the object. rather than passing absolute coordinates, it is passed how much it is to move in a direction. This causes the delay to persist. So now I'm looking at the bottom sphere stopped with the top sphere slightly delayed and also stopped. haha!

Upon closer examination, I see that what is happening is that the top sphere is off set to one side, by what looks like about one unit positive x and one unit negative z. I can't tell about the y though. so child offset is -1 on all 3 axis. strange.

I got ride of the delay. This was done by having the child render after the parent. huh. I don't know why that should matter. I'd like fix it so that I don't have to render things in order of parenting, but for now, that fixed the delay so I'm happy. 

There are also some problems with follow cams as of yet. Location and focus data is a little awkward when working with cameras, and requires a little special attention. So I'm going to have to fix that up later, I'm thinking I'll do that 8th beta.

I broke moving again. I don't know where or how. And I wasn't paying close enough attention to notice when either. grr. found it. I had switched the ors in my check to see if the move transform was the same to ands, but forgot to de morgen's it properly and left a not out. now it works again.

Alright, all that has been said and done, now I'm really going to start working on scenes!

Ok, I'm kind of at a hard point right now with figuring out how exactly screnes are going to work. I want them to manage objects and their loading. I was hoping to avoid having to deal with reading in config files till next alpha, but it appears as though I cannot. The scene needs to be told some how what it is to load, and it will do so via passed information. I'm going to probably do this via a file, but wait, boost library! what do you have to offer me? ok, the config library was for boost's uses, not other peoples, it is designed to help in the compiling of boost. 

So, how to go about this. I could create a config file reading program that passes the information to scene for it to do with as it sees fit. Or I could make scene parse the file as it gets it. I'm going to go with the later. a config file reader only helps if I'm going to have a way to make these file generic across classes. only 2 classes read from files, resource manager, and scene. ergo, no point in having a generic config reader.

let us consider everything that need be saved for an object:
The file it is loaded from
its initial state: loc, rot, scale.
it's parent/children (which ever is an easier way to do such.

that would be it. what about materials or textures and such you say? well, resource manager will deal with the loading of everything regaurding the object itself. in this case, we are only concerned with that which the scene is concerned with, and the scene is concerned with who connects to who, and where they should be. 

so I'm thinking the config file will look something like this:
objectFileName	locX	locY	locZ	rotX	rotY	rotZ	scaleX	scaleY	scaleZ
	ChildFileName	locX	locY	locZ	rotX	rotY	rotZ	scaleX	scaleY	scaleZ

its kind of a recusive file hierarchy. each time it indents, that means that all the objects that are indented are children of the object above. this works well

Ok, this gets all the object into the scene, and that's all hunky dory. but how do I map functions? I want to move the spheres I just loaded left and right, how am I supposed to explain that functionality? I can' save a function object... I don't think I can at least... hmmm. ok, that actually is a really good idea. but still. short term alternatives. I could perhaps discribe the action to be done on the object. like
onPress 'a' move(1,0,0)
onPress 'd' move(-1,0,0)
But the problem here is how do I find out what the function "move" is. Well, perhaps I can just limit it to what the scene is concerned about. The objects in the scene will hopefully update themselves with the physics engine, but the also take in input from the user.

oih. this is getting confusing. and complicated. I've got about 10 different ideas on how to solve this problem running through my head. you know what? next alpha. this is getting crazy.

Ok. for the time being I will concern myself only with the file I've shown above. I am going to make one little change to how I approach this though. I'm going to pass a string to the loader method rather than a filename. reason being is simple, if I have the resource manager pass only a string to the scene, then I need not concern myself with files, that way there doesn't have to actually be a file for this to work. There can be, the resource manager would simply read the file into a string. 

And this is the moment I decided that I'm going to put some convenience methods, like "fileToString" for example, into the resource manager as static methods. 

I look at the word "scene" everynow and then and see the word "scone"...


