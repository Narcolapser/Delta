Well, that didn't work. Turns out preprocessor directives only span single files. *sigh*. derp. figured out what was wrong. i had it in a conditional and the condition wasn't met. xD

It works like a dream.

Got it done. I've now got events moving my objects. Its a little unwield to do by hand. but I hope I won't be doing it by hand very much! xD But Events are made! now I need to make a handling system. A way to spawn events and have them sent to other objects. onward Christian soldiers!

Starting work on alpha 13. Firstly, I want to fix the segmentation fault on the 32-bit build. Not sure why Kodachi is having so much problems, but I need to fix it. The annoying part is that every change I make Rebuilds 5 files. so this isn't going to fast. *sigh*

I found the problem. the 64 bit system must handle this for me and 32-bit doesn't. but I wasn't setting viewPoint to null in the constructor for scene. So it thought it had a camera when it didn't actually. Fixing this solved the problem. and with that I'm going to jump back to my desktop.

This project is starting to get to be to much for poor little kodachi to keep up with. So I think I'm going to limit work on Delta to my desktop from now on and just use Kodachi for other side jobs. toy programs and the like. 

Now, I need to start work on my interface class again. woohoo... I'm honestly kind of sitting here going. "yup... yup... uuuuuh... yup..." I've got no idea what to do next. xD

Ok. lets break it down. The interface class is hopefully existing to take the keyboard and mouse functions away from Delta.cpp. just a quick survey of what is left in Delta:

onIdle (which just calls a redraw...)
onDisplay
onReshape
onNormalKeys
onActiveMotion
onPassiveMotion
onClick

the first three will probably go to another class I'll make a little later that will handle the window. it will also handle the changing of scenes. Right now I'm concerned with the later 4, OnNormalKeys, onActiveMotion, onPassiveMotion, onClick. I'm going to deal with the keys first.

Firstly, that is only one of the 4 functions I need to concern myself with:
glutKeyboardFunc
glutSpecialFunc
glutKeyboardUpFunc
glutSpecialUpFunc

I need something for each one of these. This is where my event system comes a little short. the first 2 register a key going down, with auto repeat off the engine would essentially assume the key was stuck down. the other 2 functions are how I have to tell the engine that the keys are up. but the important thing to know here is that this doesn't generate an event, the key is held for more than an instantaneous amount of time. 

I had 2 ideas. I could make a subscription system that allows objects to react in their own ways using data internal to them. Or, I could have cached events that get resent every frame the key is down. I'm leaning towards the later as it requires few new systems and abstracts the concept of keyboards away from the GeoObject class. Having it internal to GeoObject wouldn't lead to a very extensible system. 

Having refiring events would lead to a lot of extensible behavior. what I'm thinking is each key will keep a vector of tuples. a pointer to the object to be called, and then the event to pass to it. 

I had wondered how this would work for passing events up to the child most class, turns out that is done really simply with virtual methods. I have onEvent as a virtual method now and it calls the highest derived class. woohoo! I'm off to bed.
